# docker-compose.yml
# This Docker Compose file defines a multi-container
# application for a chat system with microservices architecture. Here's a detailed breakdown:
version: '3'

services:
  # Uses the official MongoDB image
  # Maps container port 27017 to host port 27017
  # Persists data using a named volume (mongo_data)
  # Connects to the chat-network
  mongodb:
    image: mongo:latest
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/data/db
    networks:
      - chat-network
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Uses the official Redis image
  # Maps Redis's internal port 6379 to host port 6380
  # Connects to the chat-network
  redis:
    image: redis:latest
    ports:
      - '6380:6379'
    networks:
      - chat-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

      # Built from a Dockerfile in ./apps/api-gateway/
  # Maps port 3000 to the host
  # Depends on all other services (waits for them to start first)
  # Connects to the chat-network
  # Sets environment variables for connecting to other services
  api-gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      auth-service:
        condition: service_healthy
      chat-service:
        condition: service_healthy
      presence-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    networks:
      - chat-network
    environment:
      - AUTH_SERVICE_HOST=auth-service
      - AUTH_SERVICE_PORT=3001
      - CHAT_SERVICE_HOST=chat-service
      - CHAT_SERVICE_PORT=3003
      - PRESENCE_SERVICE_HOST=presence-service
      - PRESENCE_SERVICE_PORT=3002
      - NOTIFICATION_SERVICE_HOST=notification-service
      - NOTIFICATION_SERVICE_PORT=3004
      - JWT_SECRET=your_secure_jwt_secret
      - JWT_EXPIRATION=3600

  # Built from a Dockerfile in ./apps/auth-service/
  # Depends on MongoDB
  # Connects to the chat-network
  # Sets environment variables for database connection and other service locations
  auth-service:
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
    ports:
      - '3001:3001' # Expose auth service port
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - chat-network
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/chat-auth
      - PRESENCE_SERVICE_HOST=presence-service
      - PRESENCE_SERVICE_PORT=3002
      - NOTIFICATION_SERVICE_HOST=notification-service
      - NOTIFICATION_SERVICE_PORT=3004
      - JWT_SECRET=your_secure_jwt_secret
      - JWT_EXPIRATION=3600
    healthcheck:
      test: ['CMD', 'wget', '--spider', 'http://localhost:3001/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  chat-service:
    build:
      context: .
      dockerfile: ./apps/chat-service/Dockerfile
    ports:
      - '3003:3003' # Expose chat service port
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - chat-network
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/chat-messages
      - NOTIFICATION_SERVICE_HOST=notification-service
      - NOTIFICATION_SERVICE_PORT=3004
    healthcheck:
      test: ['CMD', 'wget', '--spider', 'http://localhost:3003/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  presence-service:
    build:
      context: .
      dockerfile: ./apps/presence-service/Dockerfile
    ports:
      - '3002:3002' # Expose presence service port
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - chat-network
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379 # Fixed Redis port - this should be the internal port
      - NOTIFICATION_SERVICE_HOST=notification-service
      - NOTIFICATION_SERVICE_PORT=3004
    healthcheck:
      test: ['CMD', 'wget', '--spider', 'http://localhost:3002/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  notification-service:
    build:
      context: .
      dockerfile: ./apps/notification-service/Dockerfile
    ports:
      - '3004:3004' # Expose TCP microservice port
      - '3005:3005' # WebSocket port
    networks:
      - chat-network
    healthcheck:
      test: ['CMD', 'wget', '--spider', 'http://localhost:3004/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

# Creates a bridge network named chat-network
# All services connect to this network
# Allows services to communicate by service name
networks:
  chat-network:
    driver: bridge

volumes:
  mongo_data:
